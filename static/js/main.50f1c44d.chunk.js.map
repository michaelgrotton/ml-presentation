{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","models","colors","hex","model_acc","tfidf_acc","App","props","state","model","TFIDF","color","className","Container","style","width","margin","textAlign","fontSize","Card","height","Content","Header","this","Description","map","i","Button","basic","onClick","setState","prevState","List","bulleted","Item","overflowX","Table","celled","Row","HeaderCell","Body","Cell","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,iNCKrCC,EAAS,CAAC,sBAAuB,+BAAgC,eACjEC,EAAS,CAAC,OAAQ,QAAS,OAC3BC,EAAM,CAAC,UAAW,UAAW,WAC7BC,EAAY,CAAC,MAAO,MAAO,OAC3BC,EAAY,CAAC,MAAO,KAAM,OAuJjBC,E,YApJb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,MAAO,EAAGC,OAAO,EAAOC,MAAM,WAF5B,E,sEAKT,IAAD,OACT,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAWC,MAAO,CAACC,MAAM,MAAOC,OAAO,YAAaC,UAAU,SAC5D,uBAAGH,MAAO,CAACI,SAAS,OAAQP,MAAM,UAAlC,kYAOF,kBAACE,EAAA,EAAD,KACE,kBAACM,EAAA,EAAD,CAAML,MAAO,CAACC,MAAM,MAAOK,OAAO,QAASJ,OAAO,cAChD,kBAACG,EAAA,EAAKE,QAAN,KACE,kBAACF,EAAA,EAAKG,OAAN,CAAaR,MAAO,CAACI,SAAS,SAAS,0BAAMJ,MAAO,CAACH,MAAMY,KAAKf,MAAMG,QAASV,EAAOsB,KAAKf,MAAMC,QAAjG,IAAgH,0BAAMK,MAAO,CAACH,MAAM,mBAAoBY,KAAKf,MAAME,OAAS,gBAC5K,kBAACS,EAAA,EAAKK,YAAN,CAAkBV,MAAO,CAACI,SAAS,SAAnC,aACaK,KAAKf,MAAME,MAAQL,EAAUkB,KAAKf,MAAMC,OAASL,EAAUmB,KAAKf,MAAMC,WAKzF,kBAACI,EAAA,EAAD,KAEIZ,EAAOwB,KAAI,SAAChB,EAAOiB,GACjB,OACE,kBAACC,EAAA,EAAD,CAAQC,OAAK,EAACjB,MAAOT,EAAOwB,GAAIG,QAAS,WAAM,EAAKC,SAAS,CAACrB,MAAOiB,EAAGf,MAAOR,EAAIuB,OAAQjB,MAIjG,kBAACkB,EAAA,EAAD,CAAQE,QAAS,WAAK,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC9CrB,OAAQqB,EAAUrB,YADtB,WAIF,kBAACG,EAAA,EAAD,CAAWC,MAAO,CAACC,MAAM,MAAOC,OAAO,YAAaC,UAAU,SAC5D,uBAAGH,MAAO,CAACI,SAAS,OAAQP,MAAM,UAAlC,8WAMA,uBAAGG,MAAO,CAACI,SAAS,OAAQP,MAAM,UAAlC,gCACA,kBAACqB,EAAA,EAAD,CAAMC,UAAQ,GACZ,kBAACD,EAAA,EAAKE,KAAN,sCACA,kBAACF,EAAA,EAAKE,KAAN,4CAEF,uBAAGpB,MAAO,CAACI,SAAS,OAAQP,MAAM,UAAlC,uCACA,yBAAKG,MAAO,CAACC,MAAM,OAAQoB,UAAU,WACnC,kBAACC,EAAA,EAAD,CAAOC,QAAM,GACX,kBAACD,EAAA,EAAMd,OAAP,KACE,kBAACc,EAAA,EAAME,IAAP,KACE,kBAACF,EAAA,EAAMG,WAAP,UACA,kBAACH,EAAA,EAAMG,WAAP,eACA,kBAACH,EAAA,EAAMG,WAAP,iBACA,kBAACH,EAAA,EAAMG,WAAP,aACA,kBAACH,EAAA,EAAMG,WAAP,YACA,kBAACH,EAAA,EAAMG,WAAP,YACA,kBAACH,EAAA,EAAMG,WAAP,YACA,kBAACH,EAAA,EAAMG,WAAP,YACA,kBAACH,EAAA,EAAMG,WAAP,YACA,kBAACH,EAAA,EAAMG,WAAP,aACA,kBAACH,EAAA,EAAMG,WAAP,eAGJ,kBAACH,EAAA,EAAMI,KAAP,KACE,kBAACJ,EAAA,EAAME,IAAP,KACE,kBAACF,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,kBAIF,kBAACL,EAAA,EAAME,IAAP,KACE,kBAACF,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,iBAGA,kBAACL,EAAA,EAAMK,KAAP,2B,GAxIEC,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.50f1c44d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button, Container, Card, List, Table } from \"semantic-ui-react\"\n\nconst models = [\"K-Nearest Neighbors\", \"Linear Discriminant Analysis\", \"Naive Bayes\"]\nconst colors = [\"blue\", \"green\", \"red\"]\nconst hex = [\"#2185d0\", \"#21ba45\", \"#db2828\"]\nconst model_acc = [.4932, .5362, .4781]\nconst tfidf_acc = [.5011, .574, .5137]\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { model: 0, TFIDF: false, color:\"#2185d0\"}\n  }\n\n  render() {\n  return (\n    <div className=\"App\">\n      <Container style={{width:\"75%\", margin:\"25px auto\", textAlign:\"left\"}}>\n        <p style={{fontSize:\"16px\", color:\"black\"}}>\n          The goal of this project was to classify wine varieties using textual, categorical and\nnumerical features gathered by reviewers during a wine tasting. Categorical variables were\npreprocessed using one hot encoding, and textual data was preprocessed using the term\nfrequency-inverse document frequency statistic. The results of several classifiers, with and without TF-IDF is below.\n        </p>\n      </Container>\n      <Container>\n        <Card style={{width:\"75%\", height:\"100px\", margin:\"25px auto\"}}>\n          <Card.Content>\n            <Card.Header style={{fontSize:\"25px\"}}><span style={{color:this.state.color}}>{models[this.state.model]}</span> <span style={{color:\"rgba(0,0,0,.6)\"}}>{this.state.TFIDF && \"with TF-IDF\"}</span></Card.Header>\n            <Card.Description style={{fontSize:\"20px\"}}>\n              Accuracy: {this.state.TFIDF ? tfidf_acc[this.state.model] : model_acc[this.state.model]}\n            </Card.Description>\n          </Card.Content>\n        </Card>\n      </Container>\n      <Container>\n        {\n          models.map((model, i) => {\n            return (\n              <Button basic color={colors[i]} onClick={()=> {this.setState({model: i, color: hex[i]})}}>{model}</Button>\n            )\n          })\n        }\n        <Button onClick={()=>{this.setState(prevState => ({\n            TFIDF: !prevState.TFIDF\n          }));}}>TF-IDF</Button>\n      </Container>\n      <Container style={{width:\"75%\", margin:\"25px auto\", textAlign:\"left\"}}>\n        <p style={{fontSize:\"16px\", color:\"black\"}}>\n          For the textual description data, I used the term frequency-inverse document frequency\n          statistic (tf-idf). Tf-idf considers a corpus of documents, which in this case is the collection of\n          wine descriptions, and assigns each word a score based on the rarity of the word in the entire\n          corpus. An example of tf-idf statistics for a corpus of documents is as follows.\n        </p>\n        <p style={{fontSize:\"16px\", color:\"black\"}}> Given the below sentences: </p>\n        <List bulleted>\n          <List.Item>'the man went out for a walk'</List.Item>\n          <List.Item>'the children sat around the fire'</List.Item>\n        </List>\n        <p style={{fontSize:\"16px\", color:\"black\"}}> The TF-IDF scores are as follows. </p>\n        <div style={{width:\"100%\", overflowX:\"scroll\"}}>\n          <Table celled>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>a</Table.HeaderCell>\n                <Table.HeaderCell>around</Table.HeaderCell>\n                <Table.HeaderCell>children</Table.HeaderCell>\n                <Table.HeaderCell>fire</Table.HeaderCell>\n                <Table.HeaderCell>for</Table.HeaderCell>\n                <Table.HeaderCell>man</Table.HeaderCell>\n                <Table.HeaderCell>out</Table.HeaderCell>\n                <Table.HeaderCell>sat</Table.HeaderCell>\n                <Table.HeaderCell>the</Table.HeaderCell>\n                <Table.HeaderCell>walk</Table.HeaderCell>\n                <Table.HeaderCell>went</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              <Table.Row>\n                <Table.Cell>\n                  0.099021\n                </Table.Cell>\n                <Table.Cell>\n                  0.000000\n                </Table.Cell>\n                <Table.Cell>\n                  0.000000\n                </Table.Cell>\n                <Table.Cell>\n                  0.000000\n                </Table.Cell>\n                <Table.Cell>\n                  0.099021\n                </Table.Cell>\n                <Table.Cell>\n                  0.099021\n                </Table.Cell>\n                <Table.Cell>\n                  0.099021\n                </Table.Cell>\n                <Table.Cell>\n                  0.000000\n                </Table.Cell>\n                <Table.Cell>\n                  0.000000\n                </Table.Cell>\n                <Table.Cell>\n                  0.099021\n                </Table.Cell>\n                <Table.Cell>\n                  0.099021\n                </Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell>\n                  0.000000\n                </Table.Cell>\n                <Table.Cell>\n                  0.115525\n                </Table.Cell>\n                <Table.Cell>\n                  0.115525\n                </Table.Cell>\n                <Table.Cell>\n                  0.115525\n                </Table.Cell>\n                <Table.Cell>\n                    0.000000\n                </Table.Cell>\n                <Table.Cell>\n                    0.000000\n                </Table.Cell>\n                <Table.Cell>\n                  0.000000\n                </Table.Cell>\n                <Table.Cell>\n                  0.115525\n                </Table.Cell>\n                <Table.Cell>\n                  0.000000\n                </Table.Cell>\n                <Table.Cell>\n                  0.000000\n                </Table.Cell>\n                <Table.Cell>\n                    0.000000\n                </Table.Cell>\n              </Table.Row>\n            </Table.Body>\n          </Table>\n          </div>\n      </Container>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}